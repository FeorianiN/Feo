#pragma once
#include <wchar.h>
#include <Windows.h>
#include <stdlib.h>
#include <math.h>
#include <conio.h>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <stdio.h>
#include <string.h>
#include <locale.h>
#include "Logic.h"
using namespace Logica;

namespace MaxChess {
	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace Logica;
	int figyra1[9][9];
	int cvet=1;
	int cx=8, cy=5, bx=1, by=5;
	int FlagShah1;
	int xxx[9][9], yyy[9][9];
	int zzz, qqq;
	int m, n, z;
	char str[2]="";
	int a=0, b=0;

	/// <summary>
	/// Сводка для MaxForm
	/// </summary>
	public ref class MaxForm : public System::Windows::Forms::Form
	{
	public:
		MaxForm(void)
		{
			InitializeComponent();
			LV();
		}

	protected:
		/// <summary>
		/// Освободить все используемые ресурсы.
		/// </summary>
		~MaxForm()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::PictureBox^  BlackKing;
	private: System::Windows::Forms::PictureBox^  ChessBoard;
	private: System::Windows::Forms::PictureBox^  WhiteKing;
	private: System::Windows::Forms::TextBox^  Input;
	private: System::Windows::Forms::Button^  NextTop;
	private: System::Windows::Forms::PictureBox^  WhiteQueen;
	private: System::Windows::Forms::PictureBox^  BlackQueen;
	private: System::Windows::Forms::PictureBox^  WhiteHorseL;
	private: System::Windows::Forms::PictureBox^  WhiteHorseR;
	private: System::Windows::Forms::PictureBox^  WhiteRookL;
	private: System::Windows::Forms::PictureBox^  WhiteRookR;
	private: System::Windows::Forms::PictureBox^  WhiteElephantR;
	private: System::Windows::Forms::PictureBox^  WhiteElephantL;
	private: System::Windows::Forms::PictureBox^  WhiteRawn1;
	private: System::Windows::Forms::PictureBox^  WhiteRawn2;
	private: System::Windows::Forms::PictureBox^  WhiteRawn3;
	private: System::Windows::Forms::PictureBox^  WhiteRawn4;
	private: System::Windows::Forms::PictureBox^  WhiteRawn5;
	private: System::Windows::Forms::PictureBox^  WhiteRawn6;
	private: System::Windows::Forms::PictureBox^  WhiteRawn7;
	private: System::Windows::Forms::PictureBox^  WhiteRawn8;
	private: System::Windows::Forms::PictureBox^  BlackElephantL;
	private: System::Windows::Forms::PictureBox^  BlackElephantR;
	private: System::Windows::Forms::PictureBox^  BlackRookL;
	private: System::Windows::Forms::PictureBox^  BlackHorseL;
	private: System::Windows::Forms::PictureBox^  BlackRookR;
	private: System::Windows::Forms::PictureBox^  BlackHorseR;
	private: System::Windows::Forms::PictureBox^  BlackPawn1;
	private: System::Windows::Forms::PictureBox^  BlackPawn2;
	private: System::Windows::Forms::PictureBox^  BlackPawn3;
	private: System::Windows::Forms::PictureBox^  BlackPawn4;
	private: System::Windows::Forms::PictureBox^  BlackPawn5;
	private: System::Windows::Forms::PictureBox^  BlackPawn6;
	private: System::Windows::Forms::PictureBox^  BlackPawn7;
	private: System::Windows::Forms::PictureBox^  BlackPawn8;
	public protected: System::Windows::Forms::Label^  TextLabel;
	private:

	private: System::Windows::Forms::Label^  label1;
	private: System::Windows::Forms::Label^  label2;
	private: System::Windows::Forms::Label^  label3;




	protected:

	private:
		/// <summary>
		/// Обязательная переменная конструктора.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Требуемый метод для поддержки конструктора — не изменяйте 
		/// содержимое этого метода с помощью редактора кода.
		/// </summary>
		void InitializeComponent(void)
		{
			System::ComponentModel::ComponentResourceManager^  resources = (gcnew System::ComponentModel::ComponentResourceManager(MaxForm::typeid));
			this->BlackKing = (gcnew System::Windows::Forms::PictureBox());
			this->ChessBoard = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteKing = (gcnew System::Windows::Forms::PictureBox());
			this->Input = (gcnew System::Windows::Forms::TextBox());
			this->NextTop = (gcnew System::Windows::Forms::Button());
			this->WhiteQueen = (gcnew System::Windows::Forms::PictureBox());
			this->BlackQueen = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteHorseL = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteHorseR = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRookL = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRookR = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteElephantR = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteElephantL = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRawn1 = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRawn2 = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRawn3 = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRawn4 = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRawn5 = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRawn6 = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRawn7 = (gcnew System::Windows::Forms::PictureBox());
			this->WhiteRawn8 = (gcnew System::Windows::Forms::PictureBox());
			this->BlackElephantL = (gcnew System::Windows::Forms::PictureBox());
			this->BlackElephantR = (gcnew System::Windows::Forms::PictureBox());
			this->BlackRookL = (gcnew System::Windows::Forms::PictureBox());
			this->BlackHorseL = (gcnew System::Windows::Forms::PictureBox());
			this->BlackRookR = (gcnew System::Windows::Forms::PictureBox());
			this->BlackHorseR = (gcnew System::Windows::Forms::PictureBox());
			this->BlackPawn1 = (gcnew System::Windows::Forms::PictureBox());
			this->BlackPawn2 = (gcnew System::Windows::Forms::PictureBox());
			this->BlackPawn3 = (gcnew System::Windows::Forms::PictureBox());
			this->BlackPawn4 = (gcnew System::Windows::Forms::PictureBox());
			this->BlackPawn5 = (gcnew System::Windows::Forms::PictureBox());
			this->BlackPawn6 = (gcnew System::Windows::Forms::PictureBox());
			this->BlackPawn7 = (gcnew System::Windows::Forms::PictureBox());
			this->BlackPawn8 = (gcnew System::Windows::Forms::PictureBox());
			this->TextLabel = (gcnew System::Windows::Forms::Label());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->label3 = (gcnew System::Windows::Forms::Label());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackKing))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->ChessBoard))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteKing))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteQueen))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackQueen))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteHorseL))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteHorseR))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRookL))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRookR))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteElephantR))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteElephantL))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn1))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn2))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn3))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn4))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn5))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn6))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn7))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn8))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackElephantL))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackElephantR))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackRookL))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackHorseL))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackRookR))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackHorseR))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn1))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn2))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn3))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn4))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn5))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn6))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn7))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn8))->BeginInit();
			this->SuspendLayout();
			// 
			// BlackKing
			// 
			this->BlackKing->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackKing->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackKing.Image")));
			this->BlackKing->Location = System::Drawing::Point(358, 626);
			this->BlackKing->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackKing->Name = L"BlackKing";
			this->BlackKing->Size = System::Drawing::Size(83, 85);
			this->BlackKing->TabIndex = 0;
			this->BlackKing->TabStop = false;
			// 
			// ChessBoard
			// 
			this->ChessBoard->Dock = System::Windows::Forms::DockStyle::Fill;
			this->ChessBoard->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"ChessBoard.Image")));
			this->ChessBoard->Location = System::Drawing::Point(0, 0);
			this->ChessBoard->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->ChessBoard->Name = L"ChessBoard";
			this->ChessBoard->Size = System::Drawing::Size(1386, 752);
			this->ChessBoard->TabIndex = 1;
			this->ChessBoard->TabStop = false;
			// 
			// WhiteKing
			// 
			this->WhiteKing->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteKing->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteKing.Image")));
			this->WhiteKing->Location = System::Drawing::Point(358, 25);
			this->WhiteKing->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteKing->Name = L"WhiteKing";
			this->WhiteKing->Size = System::Drawing::Size(83, 85);
			this->WhiteKing->TabIndex = 3;
			this->WhiteKing->TabStop = false;
			// 
			// Input
			// 
			this->Input->Cursor = System::Windows::Forms::Cursors::Arrow;
			this->Input->ForeColor = System::Drawing::SystemColors::WindowText;
			this->Input->Location = System::Drawing::Point(764, 565);
			this->Input->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->Input->MaxLength = 4;
			this->Input->Name = L"Input";
			this->Input->RightToLeft = System::Windows::Forms::RightToLeft::No;
			this->Input->Size = System::Drawing::Size(208, 26);
			this->Input->TabIndex = 4;
			this->Input->Text = L"Ввод хода";
			this->Input->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			this->Input->WordWrap = false;
			this->Input->MarginChanged += gcnew System::EventHandler(this, &MaxForm::NextInput_TextChanged);
			this->Input->TextChanged += gcnew System::EventHandler(this, &MaxForm::NextInput_TextChanged);
			this->Input->Enter += gcnew System::EventHandler(this, &MaxForm::NextInput_TextChanged);
			// 
			// NextTop
			// 
			this->NextTop->Location = System::Drawing::Point(764, 601);
			this->NextTop->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->NextTop->Name = L"NextTop";
			this->NextTop->Size = System::Drawing::Size(210, 74);
			this->NextTop->TabIndex = 5;
			this->NextTop->Text = L"Сделать ход";
			this->NextTop->UseVisualStyleBackColor = true;
			this->NextTop->Click += gcnew System::EventHandler(this, &MaxForm::NextTop_Click);
			// 
			// WhiteQueen
			// 
			this->WhiteQueen->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteQueen->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteQueen.Image")));
			this->WhiteQueen->Location = System::Drawing::Point(274, 25);
			this->WhiteQueen->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteQueen->Name = L"WhiteQueen";
			this->WhiteQueen->Size = System::Drawing::Size(83, 85);
			this->WhiteQueen->TabIndex = 6;
			this->WhiteQueen->TabStop = false;
			// 
			// BlackQueen
			// 
			this->BlackQueen->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackQueen->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackQueen.Image")));
			this->BlackQueen->Location = System::Drawing::Point(274, 626);
			this->BlackQueen->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackQueen->Name = L"BlackQueen";
			this->BlackQueen->Size = System::Drawing::Size(83, 85);
			this->BlackQueen->TabIndex = 7;
			this->BlackQueen->TabStop = false;
			// 
			// WhiteHorseL
			// 
			this->WhiteHorseL->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteHorseL->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteHorseL.Image")));
			this->WhiteHorseL->Location = System::Drawing::Point(106, 25);
			this->WhiteHorseL->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteHorseL->Name = L"WhiteHorseL";
			this->WhiteHorseL->Size = System::Drawing::Size(83, 85);
			this->WhiteHorseL->TabIndex = 8;
			this->WhiteHorseL->TabStop = false;
			// 
			// WhiteHorseR
			// 
			this->WhiteHorseR->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteHorseR->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteHorseR.Image")));
			this->WhiteHorseR->Location = System::Drawing::Point(526, 25);
			this->WhiteHorseR->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteHorseR->Name = L"WhiteHorseR";
			this->WhiteHorseR->Size = System::Drawing::Size(83, 85);
			this->WhiteHorseR->TabIndex = 9;
			this->WhiteHorseR->TabStop = false;
			// 
			// WhiteRookL
			// 
			this->WhiteRookL->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRookL->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRookL.Image")));
			this->WhiteRookL->Location = System::Drawing::Point(22, 25);
			this->WhiteRookL->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRookL->Name = L"WhiteRookL";
			this->WhiteRookL->Size = System::Drawing::Size(83, 85);
			this->WhiteRookL->TabIndex = 10;
			this->WhiteRookL->TabStop = false;
			// 
			// WhiteRookR
			// 
			this->WhiteRookR->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRookR->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRookR.Image")));
			this->WhiteRookR->Location = System::Drawing::Point(610, 25);
			this->WhiteRookR->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRookR->Name = L"WhiteRookR";
			this->WhiteRookR->Size = System::Drawing::Size(83, 85);
			this->WhiteRookR->TabIndex = 11;
			this->WhiteRookR->TabStop = false;
			// 
			// WhiteElephantR
			// 
			this->WhiteElephantR->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteElephantR->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteElephantR.Image")));
			this->WhiteElephantR->Location = System::Drawing::Point(442, 25);
			this->WhiteElephantR->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteElephantR->Name = L"WhiteElephantR";
			this->WhiteElephantR->Size = System::Drawing::Size(83, 85);
			this->WhiteElephantR->TabIndex = 12;
			this->WhiteElephantR->TabStop = false;
			// 
			// WhiteElephantL
			// 
			this->WhiteElephantL->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteElephantL->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteElephantL.Image")));
			this->WhiteElephantL->Location = System::Drawing::Point(190, 25);
			this->WhiteElephantL->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteElephantL->Name = L"WhiteElephantL";
			this->WhiteElephantL->Size = System::Drawing::Size(83, 85);
			this->WhiteElephantL->TabIndex = 13;
			this->WhiteElephantL->TabStop = false;
			// 
			// WhiteRawn1
			// 
			this->WhiteRawn1->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRawn1->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRawn1.Image")));
			this->WhiteRawn1->Location = System::Drawing::Point(22, 109);
			this->WhiteRawn1->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRawn1->Name = L"WhiteRawn1";
			this->WhiteRawn1->Size = System::Drawing::Size(83, 85);
			this->WhiteRawn1->TabIndex = 14;
			this->WhiteRawn1->TabStop = false;
			// 
			// WhiteRawn2
			// 
			this->WhiteRawn2->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRawn2->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRawn2.Image")));
			this->WhiteRawn2->Location = System::Drawing::Point(106, 109);
			this->WhiteRawn2->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRawn2->Name = L"WhiteRawn2";
			this->WhiteRawn2->Size = System::Drawing::Size(83, 85);
			this->WhiteRawn2->TabIndex = 15;
			this->WhiteRawn2->TabStop = false;
			// 
			// WhiteRawn3
			// 
			this->WhiteRawn3->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRawn3->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRawn3.Image")));
			this->WhiteRawn3->Location = System::Drawing::Point(190, 109);
			this->WhiteRawn3->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRawn3->Name = L"WhiteRawn3";
			this->WhiteRawn3->Size = System::Drawing::Size(83, 85);
			this->WhiteRawn3->TabIndex = 16;
			this->WhiteRawn3->TabStop = false;
			// 
			// WhiteRawn4
			// 
			this->WhiteRawn4->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRawn4->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRawn4.Image")));
			this->WhiteRawn4->Location = System::Drawing::Point(274, 109);
			this->WhiteRawn4->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRawn4->Name = L"WhiteRawn4";
			this->WhiteRawn4->Size = System::Drawing::Size(83, 85);
			this->WhiteRawn4->TabIndex = 17;
			this->WhiteRawn4->TabStop = false;
			// 
			// WhiteRawn5
			// 
			this->WhiteRawn5->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRawn5->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRawn5.Image")));
			this->WhiteRawn5->Location = System::Drawing::Point(358, 109);
			this->WhiteRawn5->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRawn5->Name = L"WhiteRawn5";
			this->WhiteRawn5->Size = System::Drawing::Size(83, 85);
			this->WhiteRawn5->TabIndex = 18;
			this->WhiteRawn5->TabStop = false;
			// 
			// WhiteRawn6
			// 
			this->WhiteRawn6->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRawn6->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRawn6.Image")));
			this->WhiteRawn6->Location = System::Drawing::Point(442, 109);
			this->WhiteRawn6->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRawn6->Name = L"WhiteRawn6";
			this->WhiteRawn6->Size = System::Drawing::Size(83, 85);
			this->WhiteRawn6->TabIndex = 19;
			this->WhiteRawn6->TabStop = false;
			// 
			// WhiteRawn7
			// 
			this->WhiteRawn7->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRawn7->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRawn7.Image")));
			this->WhiteRawn7->Location = System::Drawing::Point(526, 109);
			this->WhiteRawn7->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRawn7->Name = L"WhiteRawn7";
			this->WhiteRawn7->Size = System::Drawing::Size(83, 85);
			this->WhiteRawn7->TabIndex = 20;
			this->WhiteRawn7->TabStop = false;
			// 
			// WhiteRawn8
			// 
			this->WhiteRawn8->BackColor = System::Drawing::SystemColors::Control;
			this->WhiteRawn8->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->WhiteRawn8->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"WhiteRawn8.Image")));
			this->WhiteRawn8->Location = System::Drawing::Point(610, 109);
			this->WhiteRawn8->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->WhiteRawn8->Name = L"WhiteRawn8";
			this->WhiteRawn8->Size = System::Drawing::Size(83, 85);
			this->WhiteRawn8->TabIndex = 21;
			this->WhiteRawn8->TabStop = false;
			this->WhiteRawn8->LocationChanged += gcnew System::EventHandler(this, &MaxForm::WhiteRawn8_LocationChanged);
			this->WhiteRawn8->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &MaxForm::WhiteRawn8_DragEnter);
			this->WhiteRawn8->DoubleClick += gcnew System::EventHandler(this, &MaxForm::WhiteRawn8_DoubleClick);
			// 
			// BlackElephantL
			// 
			this->BlackElephantL->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackElephantL->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackElephantL.Image")));
			this->BlackElephantL->Location = System::Drawing::Point(190, 626);
			this->BlackElephantL->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackElephantL->Name = L"BlackElephantL";
			this->BlackElephantL->Size = System::Drawing::Size(83, 85);
			this->BlackElephantL->TabIndex = 22;
			this->BlackElephantL->TabStop = false;
			// 
			// BlackElephantR
			// 
			this->BlackElephantR->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackElephantR->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackElephantR.Image")));
			this->BlackElephantR->Location = System::Drawing::Point(442, 626);
			this->BlackElephantR->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackElephantR->Name = L"BlackElephantR";
			this->BlackElephantR->Size = System::Drawing::Size(83, 85);
			this->BlackElephantR->TabIndex = 23;
			this->BlackElephantR->TabStop = false;
			// 
			// BlackRookL
			// 
			this->BlackRookL->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackRookL->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackRookL.Image")));
			this->BlackRookL->Location = System::Drawing::Point(22, 626);
			this->BlackRookL->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackRookL->Name = L"BlackRookL";
			this->BlackRookL->Size = System::Drawing::Size(83, 85);
			this->BlackRookL->TabIndex = 24;
			this->BlackRookL->TabStop = false;
			// 
			// BlackHorseL
			// 
			this->BlackHorseL->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackHorseL->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackHorseL.Image")));
			this->BlackHorseL->Location = System::Drawing::Point(106, 626);
			this->BlackHorseL->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackHorseL->Name = L"BlackHorseL";
			this->BlackHorseL->Size = System::Drawing::Size(83, 85);
			this->BlackHorseL->TabIndex = 25;
			this->BlackHorseL->TabStop = false;
			// 
			// BlackRookR
			// 
			this->BlackRookR->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackRookR->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackRookR.Image")));
			this->BlackRookR->Location = System::Drawing::Point(610, 626);
			this->BlackRookR->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackRookR->Name = L"BlackRookR";
			this->BlackRookR->Size = System::Drawing::Size(83, 85);
			this->BlackRookR->TabIndex = 26;
			this->BlackRookR->TabStop = false;
			// 
			// BlackHorseR
			// 
			this->BlackHorseR->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackHorseR->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackHorseR.Image")));
			this->BlackHorseR->Location = System::Drawing::Point(526, 626);
			this->BlackHorseR->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackHorseR->Name = L"BlackHorseR";
			this->BlackHorseR->Size = System::Drawing::Size(83, 85);
			this->BlackHorseR->TabIndex = 27;
			this->BlackHorseR->TabStop = false;
			// 
			// BlackPawn1
			// 
			this->BlackPawn1->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackPawn1->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackPawn1.Image")));
			this->BlackPawn1->Location = System::Drawing::Point(22, 540);
			this->BlackPawn1->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackPawn1->Name = L"BlackPawn1";
			this->BlackPawn1->Size = System::Drawing::Size(83, 85);
			this->BlackPawn1->TabIndex = 28;
			this->BlackPawn1->TabStop = false;
			// 
			// BlackPawn2
			// 
			this->BlackPawn2->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackPawn2->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackPawn2.Image")));
			this->BlackPawn2->Location = System::Drawing::Point(106, 540);
			this->BlackPawn2->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackPawn2->Name = L"BlackPawn2";
			this->BlackPawn2->Size = System::Drawing::Size(83, 85);
			this->BlackPawn2->TabIndex = 29;
			this->BlackPawn2->TabStop = false;
			// 
			// BlackPawn3
			// 
			this->BlackPawn3->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackPawn3->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackPawn3.Image")));
			this->BlackPawn3->Location = System::Drawing::Point(190, 540);
			this->BlackPawn3->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackPawn3->Name = L"BlackPawn3";
			this->BlackPawn3->Size = System::Drawing::Size(83, 85);
			this->BlackPawn3->TabIndex = 30;
			this->BlackPawn3->TabStop = false;
			// 
			// BlackPawn4
			// 
			this->BlackPawn4->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackPawn4->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackPawn4.Image")));
			this->BlackPawn4->Location = System::Drawing::Point(274, 540);
			this->BlackPawn4->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackPawn4->Name = L"BlackPawn4";
			this->BlackPawn4->Size = System::Drawing::Size(83, 85);
			this->BlackPawn4->TabIndex = 31;
			this->BlackPawn4->TabStop = false;
			// 
			// BlackPawn5
			// 
			this->BlackPawn5->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackPawn5->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackPawn5.Image")));
			this->BlackPawn5->Location = System::Drawing::Point(358, 540);
			this->BlackPawn5->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackPawn5->Name = L"BlackPawn5";
			this->BlackPawn5->Size = System::Drawing::Size(83, 85);
			this->BlackPawn5->TabIndex = 32;
			this->BlackPawn5->TabStop = false;
			// 
			// BlackPawn6
			// 
			this->BlackPawn6->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackPawn6->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackPawn6.Image")));
			this->BlackPawn6->Location = System::Drawing::Point(442, 540);
			this->BlackPawn6->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackPawn6->Name = L"BlackPawn6";
			this->BlackPawn6->Size = System::Drawing::Size(83, 85);
			this->BlackPawn6->TabIndex = 33;
			this->BlackPawn6->TabStop = false;
			// 
			// BlackPawn7
			// 
			this->BlackPawn7->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackPawn7->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackPawn7.Image")));
			this->BlackPawn7->Location = System::Drawing::Point(526, 540);
			this->BlackPawn7->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackPawn7->Name = L"BlackPawn7";
			this->BlackPawn7->Size = System::Drawing::Size(83, 85);
			this->BlackPawn7->TabIndex = 34;
			this->BlackPawn7->TabStop = false;
			// 
			// BlackPawn8
			// 
			this->BlackPawn8->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->BlackPawn8->Image = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"BlackPawn8.Image")));
			this->BlackPawn8->Location = System::Drawing::Point(610, 540);
			this->BlackPawn8->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->BlackPawn8->Name = L"BlackPawn8";
			this->BlackPawn8->Size = System::Drawing::Size(83, 85);
			this->BlackPawn8->TabIndex = 35;
			this->BlackPawn8->TabStop = false;
			// 
			// TextLabel
			// 
			this->TextLabel->AutoEllipsis = true;
			this->TextLabel->AutoSize = true;
			this->TextLabel->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10));
			this->TextLabel->Location = System::Drawing::Point(759, 46);
			this->TextLabel->MaximumSize = System::Drawing::Size(542, 200);
			this->TextLabel->Name = L"TextLabel";
			this->TextLabel->Size = System::Drawing::Size(261, 25);
			this->TextLabel->TabIndex = 36;
			this->TextLabel->Text = L"Вывод ходов белых фигур \r\n";
			this->TextLabel->Click += gcnew System::EventHandler(this, &MaxForm::NextTop_Click);
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(204)));
			this->label1->Location = System::Drawing::Point(836, 102);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(0, 20);
			this->label1->TabIndex = 37;
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->Font = (gcnew System::Drawing::Font(L"Cambria", 12, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(204)));
			this->label2->ForeColor = System::Drawing::Color::DarkRed;
			this->label2->Location = System::Drawing::Point(759, 448);
			this->label2->MaximumSize = System::Drawing::Size(542, 110);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(133, 28);
			this->label2->TabIndex = 38;
			this->label2->Text = L"Ход белых";
			this->label2->Click += gcnew System::EventHandler(this, &MaxForm::NextTop_Click);
			// 
			// label3
			// 
			this->label3->AutoEllipsis = true;
			this->label3->AutoSize = true;
			this->label3->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10));
			this->label3->Location = System::Drawing::Point(759, 246);
			this->label3->MaximumSize = System::Drawing::Size(542, 200);
			this->label3->Name = L"label3";
			this->label3->Size = System::Drawing::Size(271, 25);
			this->label3->TabIndex = 39;
			this->label3->Text = L"Вывод ходов черных фигур \n";
			// 
			// MaxForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(9, 20);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->AutoSize = true;
			this->ClientSize = System::Drawing::Size(1386, 752);
			this->Controls->Add(this->WhiteRawn8);
			this->Controls->Add(this->label3);
			this->Controls->Add(this->label2);
			this->Controls->Add(this->label1);
			this->Controls->Add(this->TextLabel);
			this->Controls->Add(this->BlackPawn8);
			this->Controls->Add(this->BlackPawn7);
			this->Controls->Add(this->BlackPawn6);
			this->Controls->Add(this->BlackPawn5);
			this->Controls->Add(this->BlackPawn4);
			this->Controls->Add(this->BlackPawn3);
			this->Controls->Add(this->BlackPawn2);
			this->Controls->Add(this->BlackPawn1);
			this->Controls->Add(this->BlackHorseR);
			this->Controls->Add(this->BlackRookR);
			this->Controls->Add(this->BlackHorseL);
			this->Controls->Add(this->BlackRookL);
			this->Controls->Add(this->BlackElephantR);
			this->Controls->Add(this->BlackElephantL);
			this->Controls->Add(this->WhiteRawn7);
			this->Controls->Add(this->WhiteRawn6);
			this->Controls->Add(this->WhiteRawn5);
			this->Controls->Add(this->WhiteRawn4);
			this->Controls->Add(this->WhiteRawn3);
			this->Controls->Add(this->WhiteRawn2);
			this->Controls->Add(this->WhiteRawn1);
			this->Controls->Add(this->WhiteElephantL);
			this->Controls->Add(this->WhiteElephantR);
			this->Controls->Add(this->WhiteRookR);
			this->Controls->Add(this->WhiteRookL);
			this->Controls->Add(this->WhiteHorseR);
			this->Controls->Add(this->WhiteHorseL);
			this->Controls->Add(this->BlackQueen);
			this->Controls->Add(this->WhiteQueen);
			this->Controls->Add(this->NextTop);
			this->Controls->Add(this->Input);
			this->Controls->Add(this->WhiteKing);
			this->Controls->Add(this->BlackKing);
			this->Controls->Add(this->ChessBoard);
			this->Margin = System::Windows::Forms::Padding(4, 5, 4, 5);
			this->Name = L"MaxForm";
			this->Text = L"Шахматы";
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackKing))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->ChessBoard))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteKing))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteQueen))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackQueen))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteHorseL))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteHorseR))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRookL))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRookR))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteElephantR))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteElephantL))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn1))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn2))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn3))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn4))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn5))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn6))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn7))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->WhiteRawn8))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackElephantL))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackElephantR))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackRookL))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackHorseL))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackRookR))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackHorseR))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn1))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn2))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn3))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn4))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn5))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn6))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn7))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->BlackPawn8))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();

		}

		void proverka_figur(int new_x,int new_y)
		{
		if (figyra1[new_x][new_y]==1)
			this->Controls->Remove(this->WhiteRookL);
		if (figyra1[new_x][new_y] == 2)
			this->Controls->Remove(this->WhiteHorseL);
		if (figyra1[new_x][new_y] == 3)
			this->Controls->Remove(this->WhiteElephantL);
		if (figyra1[new_x][new_y] == 4)
			this->Controls->Remove(this->WhiteQueen);
		if (figyra1[new_x][new_y] == 5)
			this->Controls->Remove(this->WhiteKing);
		if (figyra1[new_x][new_y] == 6)
			this->Controls->Remove(this->WhiteElephantR);
		if (figyra1[new_x][new_y] == 7)
			this->Controls->Remove(this->WhiteHorseR);
		if (figyra1[new_x][new_y] == 8)
			this->Controls->Remove(this->WhiteRookR);
		if (figyra1[new_x][new_y] == 11)
			this->Controls->Remove(this->WhiteRawn1);
		if (figyra1[new_x][new_y] == 12)
			this->Controls->Remove(this->WhiteRawn2);
		if (figyra1[new_x][new_y] == 13)
			this->Controls->Remove(this->WhiteRawn3);
		if (figyra1[new_x][new_y] == 14)
			this->Controls->Remove(this->WhiteRawn4);
		if (figyra1[new_x][new_y] == 15)
			this->Controls->Remove(this->WhiteRawn5);
		if (figyra1[new_x][new_y] == 16)
			this->Controls->Remove(this->WhiteRawn6);
		if (figyra1[new_x][new_y] == 17)
			this->Controls->Remove(this->WhiteRawn7);
		if (figyra1[new_x][new_y] == 18)
			this->Controls->Remove(this->WhiteRawn8);
		
		if (figyra1[new_x][new_y] == 31)
			this->Controls->Remove(this->BlackRookL);
		if (figyra1[new_x][new_y] == 32)
			this->Controls->Remove(this->BlackHorseL);
		if (figyra1[new_x][new_y] == 33)
			this->Controls->Remove(this->BlackElephantL);
		if (figyra1[new_x][new_y] == 34)
			this->Controls->Remove(this->BlackQueen);
		if (figyra1[new_x][new_y] == 35)
			this->Controls->Remove(this->BlackKing);
		if (figyra1[new_x][new_y] == 36)
			this->Controls->Remove(this->BlackElephantR);
		if (figyra1[new_x][new_y] == 37)
			this->Controls->Remove(this->BlackHorseR);
		if (figyra1[new_x][new_y] == 38)
			this->Controls->Remove(this->BlackRookR);
		if (figyra1[new_x][new_y] == 21)
			this->Controls->Remove(this->BlackPawn1);
		if (figyra1[new_x][new_y] == 22)
			this->Controls->Remove(this->BlackPawn2);
		if (figyra1[new_x][new_y] == 23)
			this->Controls->Remove(this->BlackPawn3);
		if (figyra1[new_x][new_y] == 24)
			this->Controls->Remove(this->BlackPawn4);
		if (figyra1[new_x][new_y] == 25)
			this->Controls->Remove(this->BlackPawn5);
		if (figyra1[new_x][new_y] == 26)
			this->Controls->Remove(this->BlackPawn6);
		if (figyra1[new_x][new_y] == 27)
			this->Controls->Remove(this->BlackPawn7);
		if (figyra1[new_x][new_y] == 28)
		    this->Controls->Remove(this->BlackPawn8);
		
		}

		void LV(void)
		{
			bx = 1;by = 5; cx = 8; by = 5;
			figyra1[1][1] = 1; 	figyra1[1][2] = 2; 	figyra1[1][3] = 3; 	figyra1[1][4] = 4; 	
			figyra1[1][5] = 5; 	figyra1[1][6] = 6; 	figyra1[1][7] = 7; 	figyra1[1][8] = 8;
			figyra1[2][1] = 11; figyra1[2][2] = 12; figyra1[2][3] = 13; figyra1[2][4] = 14; 
			figyra1[2][5] = 15; figyra1[2][6] = 16; figyra1[2][7] = 17; figyra1[2][8] = 18;
			for (zzz = 3; zzz <= 6; zzz++) {
				for (qqq = 1; qqq <= 8; qqq++) {
					figyra1[zzz][qqq] = 0;
				}
			}
			figyra1[7][1] = 21; figyra1[7][2] = 22; figyra1[7][3] = 23; figyra1[7][4] = 24;
			figyra1[7][5] = 25; figyra1[7][6] = 26; figyra1[7][7] = 27; figyra1[7][8] = 28;
			figyra1[8][1] = 31; figyra1[8][2] = 32; figyra1[8][3] = 33; figyra1[8][4] = 34;
			figyra1[8][5] = 35; figyra1[8][6] = 36; figyra1[8][7] = 37; figyra1[8][8] = 38;
			xxx[1][1] = xxx[1][2] = xxx[1][3] = xxx[1][4] = xxx[1][5] = xxx[1][6] = xxx[1][7] = xxx[1][8] = 16;
			xxx[2][1] = xxx[2][2] = xxx[2][3] = xxx[2][4] = xxx[2][5] = xxx[2][6] = xxx[2][7] = xxx[2][8] = 72;
			xxx[3][1] = xxx[3][2] = xxx[3][3] = xxx[3][4] = xxx[3][5] = xxx[3][6] = xxx[3][7] = xxx[3][8] = 128;
			xxx[4][1] = xxx[4][2] = xxx[4][3] = xxx[4][4] = xxx[4][5] = xxx[4][6] = xxx[4][7] = xxx[4][8] = 184;
			xxx[5][1] = xxx[5][2] = xxx[5][3] = xxx[5][4] = xxx[5][5] = xxx[5][6] = xxx[5][7] = xxx[5][8] = 240;
			xxx[6][1] = xxx[6][2] = xxx[6][3] = xxx[6][4] = xxx[6][5] = xxx[6][6] = xxx[6][7] = xxx[6][8] = 296;
			xxx[7][1] = xxx[7][2] = xxx[7][3] = xxx[7][4] = xxx[7][5] = xxx[7][6] = xxx[7][7] = xxx[7][8] = 352;
			xxx[8][1] = xxx[8][2] = xxx[8][3] = xxx[8][4] = xxx[8][5] = xxx[8][6] = xxx[8][7] = xxx[8][8] = 407;
			yyy[1][1] = yyy[1][2] = yyy[1][3] = yyy[1][4] = yyy[1][5] = yyy[1][6] = yyy[1][7] = yyy[1][8] = 16;
			yyy[2][1] = yyy[2][2] = yyy[2][3] = yyy[2][4] = yyy[2][5] = yyy[2][6] = yyy[2][7] = yyy[2][8] = 72;
			yyy[3][1] = yyy[3][2] = yyy[3][3] = yyy[3][4] = yyy[3][5] = yyy[3][6] = yyy[3][7] = yyy[3][8] = 128;
			yyy[4][1] = yyy[4][2] = yyy[4][3] = yyy[4][4] = yyy[4][5] = yyy[4][6] = yyy[4][7] = yyy[4][8] = 184;
			yyy[5][1] = yyy[5][2] = yyy[5][3] = yyy[5][4] = yyy[5][5] = yyy[5][6] = yyy[5][7] = yyy[5][8] = 240;
			yyy[6][1] = yyy[6][2] = yyy[6][3] = yyy[6][4] = yyy[6][5] = yyy[6][6] = yyy[6][7] = yyy[6][8] = 296;
			yyy[7][1] = yyy[7][2] = yyy[7][3] = yyy[7][4] = yyy[7][5] = yyy[7][6] = yyy[7][7] = yyy[7][8] = 352;
			yyy[8][1] = yyy[8][2] = yyy[8][3] = yyy[8][4] = yyy[8][5] = yyy[8][6] = yyy[8][7] = yyy[8][8] = 407;
		}


#pragma endregion
	private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e) {
	
		
	}
	private: System::Void NextTop_Click(System::Object^  sender, System::EventArgs^  e) {
		int flag_chek,kk,ll;
		int  fl, temp_bx = 0, temp_by = 0, temp_cx = 0, temp_cy = 0;
		FlagShah1=0;
		if (Mat(bx, by, 1) == 1)
		{
			label2->Text = System::Convert::ToString("МАТ белому королю! Победа черных!");
			system("Pause");
			exit;
	    }
		if (Mat(cx, cy, 1) == 2)
		{
			label2->Text = System::Convert::ToString("МАТ черному королю! Победа белых!");
			system("Pause");
			exit;
		}
	if (cvet == 1) { label2->Text = System::Convert::ToString("Ход белых"); }
	else { label2->Text = System::Convert::ToString("Ход черных"); }
	String ^yuti1 = System::Convert::ToString(Input->Text);
	kk = yuti1->Length;
	if (kk == 4) {
		str[0] = yuti1[0];
		a = int(yuti1[1]);
		str[1] = yuti1[2];
		b = int(yuti1[3]);
		if ((str[0] >= 'A') && (str[0] <= 'H') && (str[1] >= 'A') && (str[1] <= 'H') && (a >= 49) && (a <= 57) && (b >= 49) && (b <= 57))
		{
			if (cvet == 1)
			{
				label2->Text = System::Convert::ToString("Ход белых");
				tempm();//запомнить массив
				temp_bx = bx;
				temp_by = by;
				flag_chek = Chek(cvet, str[0], a - 48, str[1], b - 48);
				if (flag_chek == 111)
				{
					bx = b - 48;
					by = str[1] - 64;
				}

				if (flag_chek == 5)
				{
					label2->Text = System::Convert::ToString("Неверный ход!");
				}
				else
				{
					if ((flag_chek == 0) || (flag_chek == 111))
					{
						FlagShah1 = Shah(bx, by, 1);
						if (FlagShah1 != 1)
						{
							proverka_figur(b - 48, str[1] - 64);
							TextLabel->Text = System::Convert::ToString(TextLabel->Text + yuti1 + "  ");
							if (figyra1[a - 48][str[0] - 64] == 1) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 1;
								this->WhiteRookL->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 2) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 2;
								this->WhiteHorseL->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 3) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 3;
								this->WhiteElephantL->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 4) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 4;
								this->WhiteQueen->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 5) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 5;
								this->WhiteKing->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);

							}
							if (figyra1[a - 48][str[0] - 64] == 6) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 6;
								this->WhiteElephantR->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 7) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 7;
								this->WhiteHorseR->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 8) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 8;
								this->WhiteRookR->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 11) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 11;
								this->WhiteRawn1->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 12) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 12;
								this->WhiteRawn2->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 13) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 13;
								this->WhiteRawn3->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 14) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 14;
								this->WhiteRawn4->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 15) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 15;
								this->WhiteRawn5->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 16) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 16;
								this->WhiteRawn6->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 17) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 17;
								this->WhiteRawn7->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							if (figyra1[a - 48][str[0] - 64] == 18) {
								figyra1[a - 48][str[0] - 64] = 0;
								figyra1[b - 48][str[1] - 64] = 18;
								this->WhiteRawn8->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
							}
							cvet = 0;
						}
					}
					FlagShah1 = Shah(bx, by, 1); // шах
					if (FlagShah1 == 1)
					{
						label2->Text = System::Convert::ToString("Неверный ход! Шах сохраняется!");
						mtemp(); cvet = 1; //вернуть массив
						bx = temp_bx;
						by = temp_by;
					}
					FlagShah1 = Shah(cx, cy, 0);
					if (FlagShah1 == 2)
					{
						label2->Text = System::Convert::ToString("Шах черному королю!");
						cvet = 0;
					}
				}
			}
			else
			{
				if (cvet == 0)
				{
					label2->Text = System::Convert::ToString("Ход черных");
					tempm();
					temp_cx = cx;
					temp_cy = cy;
					flag_chek = Chek(cvet, str[0], a - 48, str[1], b - 48);
					if (flag_chek == 112)
					{
						kk = cx = b - 48;
						ll = cy = str[1] - 64;
					}
					if (flag_chek == 5)
					{
						label2->Text = System::Convert::ToString("Неверный ход!");
					}

					else
					{
						if ((flag_chek == 0) || (flag_chek == 112))
						{
							FlagShah1 = Shah(cx, cy, 0);
							if (FlagShah1 != 2) {
								proverka_figur(b - 48, str[1] - 64);
								label3->Text = System::Convert::ToString(label3->Text + yuti1 + "  ");
								if (figyra1[a - 48][str[0] - 64] == 31) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 31;
									this->BlackRookL->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 32) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 32;
									this->BlackHorseL->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);

								}
								if (figyra1[a - 48][str[0] - 64] == 33) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 33;
									this->BlackElephantL->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 34) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 34;
									this->BlackQueen->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 35) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 35;
									this->BlackKing->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 36) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 36;
									this->BlackElephantR->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 37) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 37;
									this->BlackHorseR->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 38) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 38;
									this->BlackRookR->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 21) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 21;
									this->BlackPawn1->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 22) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 22;
									this->BlackPawn2->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 23) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 23;
									this->BlackPawn3->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 24) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 24;
									this->BlackPawn4->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 25) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 25;
									this->BlackPawn5->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 26) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 26;
									this->BlackPawn6->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 27) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 27;
									this->BlackPawn7->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								if (figyra1[a - 48][str[0] - 64] == 28) {
									figyra1[a - 48][str[0] - 64] = 0;
									figyra1[b - 48][str[1] - 64] = 28;
									this->BlackPawn8->Location = System::Drawing::Point(xxx[str[1] - 64][b - 48], yyy[b - 48][str[1] - 64]);
								}
								cvet = 1;
							}
							FlagShah1 = Shah(cx, cy, 0);
							if (FlagShah1 == 2)
							{
								label2->Text = System::Convert::ToString("Неверный ход! Шах сохраняется!");
								mtemp(); cvet = 0;
								cx = temp_cx;
								cy = temp_cy;
							}
							FlagShah1 = Shah(bx, by, 1);
							if (FlagShah1 == 1)
							{
								label2->Text = System::Convert::ToString("Шах белому королю!");
								cvet = 1;
							}
						}
					}
				}
			}
		}
		else
		{
			label2->Text = System::Convert::ToString("Ввод шагов происходит" + "\n" + "латинскими заглавными буквами и цифрами(4шт)." + " Например: A2A4");
		}
	}
	else
	{
		label2->Text = System::Convert::ToString("Ввод шагов происходит" + "\n" + "латинскими заглавными буквами и цифрами(4шт)." + " Например: A2A4");
	}
}
private: System::Void NextInput_TextChanged(System::Object^  sender, System::EventArgs^  e) {

	if (cvet == 1) { label2->Text = System::Convert::ToString("Ход белых"); }
	else { label2->Text = System::Convert::ToString("Ход черных"); }
}

private: System::Void WhiteRawn8_DoubleClick(System::Object^  sender, System::EventArgs^  e) {
	this->WhiteRawn8->Location = System::Drawing::Point(184, 184);
}

private: System::Void WhiteRawn8_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
}
private: System::Void WhiteRawn8_LocationChanged(System::Object^  sender, System::EventArgs^  e) {

}


private: System::Void WhiteRawn8_DragLeave(System::Object^  sender, System::EventArgs^  e) {
	this->WhiteRawn8->Location = System::Drawing::Point(184, 184);
}
private: System::Void WhiteRawn8_DragEnter(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {

}
private: System::Void button1_DragDrop(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
	this->WhiteRawn8->Location = System::Drawing::Point(184, 184);
}
private: System::Void button1_QueryContinueDrag(System::Object^  sender, System::Windows::Forms::QueryContinueDragEventArgs^  e) {
}
};
}
